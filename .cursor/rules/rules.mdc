---
description: 
globs: 
alwaysApply: true
---

# Your rule content

1 Vision & Problem
“Give small manufacturers the power of an ERP’s product module without the cost or complexity.”

Excel- and e-mail–driven stock management causes:

duplicate SKUs,

stock-outs or over-stock,

inconsistent marketplace descriptions.

KernLogic centralises every SKU—with price, stock, category, rich description, tags—into a secure, blazingly fast web app. A non-technical inventory manager can bulk-upload 5 000 SKUs, spot low stock at a glance, and push perfect data to Shopify / Amazon feeds in later versions.

2 Goals & KPIs

KPI	Target v1	Why it matters
Time to import 1 000 SKUs (CSV)	≤ 60 s	Shows upload + parse speed
Dashboard TTI (Time-to-interactive)	≤ 1 s (95th pct)	UX snappiness
CRUD success rate	≥ 99 %	Reliability
Weekly active users (pilot)	60 % of invited	Engagement
Bug bounce-backs in first month	0 critical, ≤ 3 medium	Stability
3 Personas

Persona	Key tasks	Pain today
María – Inventory Manager	Bulk updates stock, watches low-stock list, prints pick lists (later)	Manual Excel counts; mistakes
Jorge – E-com Specialist	Edits descriptions, categories, tags; exports feed	Copy-paste to multiple platforms
Ana – Owner/GM	Checks value of stock, low-stock KPI, audit log	No real-time visibility
4 Feature Set (v1)
Secure Auth – Email + password, JWT access+refresh, password reset by email (Django builtin).

Products CRUD – Name, SKU (unique/user), price (decimal), stock (int), category, description, is_active.

Bulk CSV Upload – Drag-and-drop CSV; row-level preview; duplicate-SKU detection.

Dashboard – KPI cards (total products, total inventory value, low-stock count), latest activity widget.

Search / Filter – Full-text on name, SKU, category; filter by category, active/inactive.

Soft Delete & Restore – Toggle active status; keep history.

Responsive UI – Works at ≥1280 px desktop & 375 px mobile.

Audit Log (read-only list) – Last 100 create/update/delete events.

Later (v2 backlog): tag management, role-permissions, outbound E-commerce feeds.

5 Detailed UX Walkthrough
5.1 Login / Registration
/login: Email + password → POST /api/token/.
Edge cases:

wrong credentials → inline error “Email or password incorrect”; no page reload.

server offline → toast “Server unreachable, check connection.”

Successful login:

Store access + refresh in localStorage.

Authorization: Bearer <access> auto-attached by axios interceptor.

Redirect to /app/dashboard.

Auto-refresh: Interceptor catches 401, calls /api/token/refresh/.
Edge cases:

refresh token expired → clear storage, redirect to /login?expired=1.

5.2 Dashboard (/app/dashboard)
Layout: Sidebar (logo, nav links), top bar (user menu), main content.

KPI cards:

Total Products

Stock Value (Σ price × stock)

Low-Stock (<10 units)
Animated counting effect (framer-motion) on load.

Quick Actions: View Products, Bulk Upload CSV, Generate Descriptions (future).

Recent Activity widget: “Ana edited SKU 12345 – 2 min ago”.

Edge cases
If no products yet → show onboarding card “Get started: Upload CSV or Create Product”.

API failure → skeleton loaders + toast “Can’t load stats (retry)”.

5.3 Products List (/app/products)

Column	Notes
Name, SKU, Category	text-truncate for long strings
Price	2-decimals, currency symbol
Stock	warning badge if <10
Status	pill: Active / Inactive
Actions	Edit, Delete
Search bar filters client-side first, server-side when > 100 rows.
Pagination (server) after 50 rows (DRF LimitOffsetPagination).

Actions
Add New Product → /app/products/new (opens ProductForm blank).

Edit → /app/products/:id/edit (prefills form).

Delete → confirm dialog → DELETE /api/products/:id/ (soft sets is_active=False).
UI removes row optimistically; rollback if API 4xx/5xx.

5.4 ProductForm Component
Fields: name, description (textarea auto-size), SKU, price (number step=0.01), stock, category (autocomplete).

Validation: zod + react-hook-form; front mirror of backend rules.

Submit:

if new → POST /api/products/

if edit → PATCH /api/products/:id/

On success → toast + redirect back to list → React Query invalidates products cache.

Edge cases & Messages

Case	Handling
Duplicate SKU (400)	highlight SKU input, message from API
Price negative	prevented client-side
Network loss mid-submit	disable button, toast “Network error (offline?)”
Token expired	axios interceptor refreshes; if refresh fails → login redirect
5.5 Bulk CSV Upload (/app/upload)
Drag CSV → parse with PapaParse.

Show table preview (first 20 rows).

Validate client-side: missing columns, price numeric, stock int.

Click Import → POST /api/products/bulk/ (batch of 500 per request).

Progress bar updates; duplicates are returned with row error list.

Edge cases: large file ⇒ chunked upload; server returns 207 Multi-Status with per-row errors; UI shows them and lets user download “error rows” CSV.

6 Backend Workflow (Django)
Models

Product (fields above).

Optional ActivityLog capturing action (create/update/delete), product_id, user, timestamp, diff (JSON).

Serializers

ProductSerializer (provided earlier).

BulkProductSerializer for CSV import (list serializer, validates each row).

ViewSets

ProductViewSet – DRF ModelViewSet, queryset = Product.objects.filter(created_by=request.user).

Custom bulk_create() action (POST /api/products/bulk/).

stats action.

Soft Delete in perform_destroy: is_active=False; returns 204.

Permissions

Global IsAuthenticated.

Each product belongs to user; other users see nothing (filter in queryset).

Validation Edge Cases

SKU uniqueness: allow same SKU on PATCH of own instance.

Decimal price: API receives string, serializer casts to Decimal.

CSV duplicates inside same file: check in-memory set before hitting DB for speed.

7 Edge-Case Checklist

Area	Edge case	Solution
Auth	Refresh token blacklisted	Receive 401 on refresh → logout
UI	Mobile ≤ 375 px	Table scroll-x; cards stack
Bulk	> 10 000 rows CSV	Chunk to 2 000 rows; Celery async task in v1.1
API	Concurrent duplicate SKU POSTs	DB unique constraint raises IntegrityError → return 409
Form	User closes tab mid-submit	Front doesn’t navigate until 2xx; unsaved row won’t appear
Delete	“Undo” needed?	v1 soft delete; v1.1 add “Restore” action
Connectivity	Server down	Axios global interceptor shows banner “Server unavailable”
8 Step-by-Step Build Plan
Week 1 — Foundations
Init Django project + products app, install DRF, SimpleJWT, django-cors-headers.

Create Product model, run migrations.

Set up JWT endpoints, CORS settings, ProductViewSet (list/retrieve/create/patch/delete).

Create minimal React Vite app, Tailwind config, AuthContext + login page.

Week 2 — CRUD Front & Back
Build ProductSerializer with validators.

Implement React ProductForm, Products list page, axios instance + interceptor.

Hook list to real API via React Query.

Toast notifications.

Soft delete flow; ActivityLog model + simple list.

Week 3 — Dashboard & Stats
stats action in ViewSet.

Dashboard components (StatCard, KPI fetch hook).

Recent Activity widget.

Week 4 — Bulk Upload
CSV parser page (PapaParse).

Backend bulk endpoint, row-level validation.

Progress UI, duplicate detection.

Extensive error tests (400, 207).

Week 5 — Polish & Tests
Unit tests: 80 % backend coverage (pytest-django).

React component tests (RTL) for form + list.

End-to-end smoke test (Cypress): login → create → edit → delete.

Dockerfile + docker-compose for dev; GitHub Actions CI.

Week 6 — Pilot & Feedback
Deploy to Render (Postgres add-on).

Onboard pilot company, collect UX feedback, monitor logs, iron out any 500s.

Freeze v1, schedule v1.1 tasks.

9 Acceptance Criteria
A user can log in, create, edit, soft-delete, and bulk import products with no unhandled errors.

Newly created or updated products appear in list and dashboard metrics within one page reload (or optimistic update).

All edge cases in section 7 are handled gracefully (no blank screens or uncaught exceptions).

Test suite passes; CI pipeline green.

Pilot users report < 5 minor UX issues and ≥ 4/5 satisfaction in survey.
- You can @ files here
- You can use markdown but dont have to
