openapi: 3.0.3
info:
  title: KernLogic API
  version: 1.0.0
  description: Inventory and product management API
paths:
  /token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /products/:
    post:
      operationId: products_create
      description: Create a new product
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    get:
      operationId: products_list
      description: API endpoint for managing product data.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
  /products/brands/:
    get:
      operationId: products_brands_retrieve
      description: Return a list of unique brands for dropdown menus.
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/bulk_create/:
    post:
      operationId: products_bulk_create_create
      description: Create multiple products at once from a CSV upload or bulk input.
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/categories/:
    post:
      operationId: products_categories_create
      description: |-
        GET: Return a list of unique categories for dropdown menus.
        POST: Create a new category by adding a product with that category.
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    get:
      operationId: products_categories_retrieve
      description: |-
        GET: Return a list of unique categories for dropdown menus.
        POST: Create a new category by adding a product with that category.
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/cleanup_category_placeholders/:
    post:
      operationId: products_cleanup_category_placeholders_create
      description: Remove all category placeholder products (created when adding categories)
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/stats/:
    get:
      operationId: products_stats_retrieve
      description: Return basic statistics about products
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/tags/:
    post:
      operationId: products_tags_create
      description: |-
        GET: Return a list of unique tags from all products.
        POST: Create a new tag by adding it to a "tag repository" product or returning an existing tag.
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    get:
      operationId: products_tags_retrieve
      description: |-
        GET: Return a list of unique tags from all products.
        POST: Create a new tag by adding it to a "tag repository" product or returning an existing tag.
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}/:
    patch:
      operationId: products_partial_update
      description: API endpoint for managing product data.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_destroy
      description: API endpoint for managing product data.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
    get:
      operationId: products_retrieve
      description: API endpoint for managing product data.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}/related-add/:
    post:
      operationId: products_related_add_create
      description: Add a related product to this product
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}/explicit-relations/:
    get:
      operationId: products_explicit_relations_retrieve
      description: |-
        Return only the explicitly related products through ProductRelation model.
        Does not include category matches.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}/images/{image_pk}/:
    patch:
      operationId: products_images_partial_update
      description: API endpoint for managing product data.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: image_pk
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_images_destroy
      description: API endpoint for managing product data.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: image_pk
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /products/{id}/related/{related_id}/:
    patch:
      operationId: products_related_partial_update
      description: Update or delete a related product relationship
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: related_id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_related_destroy
      description: Update or delete a related product relationship
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: related_id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /products/{id}/related-list/:
    get:
      operationId: products_related_list_retrieve
      description: |-
        Return a list of related products based on the same category.
        Excludes the source product from the results.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}/images/reorder/:
    patch:
      operationId: products_images_reorder_partial_update
      description: API endpoint for managing product data.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}/set-primary/:
    post:
      operationId: products_set_primary_create
      description: Set an asset as primary
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}/images/:
    post:
      operationId: products_images_create
      description: API endpoint for managing product data.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /dashboard/activity/:
    get:
      operationId: dashboard_activity_retrieve
      description: Return recent activity data (limit 10)
      tags:
      - dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /dashboard/incomplete_products/:
    get:
      operationId: dashboard_incomplete_products_retrieve
      description: Return the top 5 incomplete products
      tags:
      - dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /dashboard/inventory_trend/:
    get:
      operationId: dashboard_inventory_trend_retrieve
      description: Return inventory value trend data for a given time range
      tags:
      - dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /dashboard/summary/:
    get:
      operationId: dashboard_summary_retrieve
      description: |-
        Return dashboard summary data:
        - KPI numbers (total products, inventory value, inactive products, team members)
        - Data completeness percentage
        - Most missing fields
        - Product status counts
      tags:
      - dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /products/{product_pk}/assets/:
    post:
      operationId: products_assets_create
      description: |-
        Nested under /products/<product_pk>/assets/.
        Handles upload, delete, reorder and set-primary.
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAsset'
          description: ''
    get:
      operationId: products_assets_list
      description: |-
        Nested under /products/<product_pk>/assets/.
        Handles upload, delete, reorder and set-primary.
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductAsset'
          description: ''
  /products/{product_pk}/assets/reorder/:
    post:
      operationId: products_assets_reorder_create
      description: 'POST body: [{id: 3, order: 1}, …]'
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAsset'
          description: ''
  /products/{product_pk}/assets/{id}/:
    patch:
      operationId: products_assets_partial_update
      description: |-
        Nested under /products/<product_pk>/assets/.
        Handles upload, delete, reorder and set-primary.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductAssetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductAssetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductAssetRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAsset'
          description: ''
    get:
      operationId: products_assets_retrieve
      description: |-
        Nested under /products/<product_pk>/assets/.
        Handles upload, delete, reorder and set-primary.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAsset'
          description: ''
    delete:
      operationId: products_assets_destroy
      description: |-
        Nested under /products/<product_pk>/assets/.
        Handles upload, delete, reorder and set-primary.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
    put:
      operationId: products_assets_update
      description: |-
        Nested under /products/<product_pk>/assets/.
        Handles upload, delete, reorder and set-primary.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAsset'
          description: ''
  /products/{product_pk}/assets/{id}/set_primary/:
    post:
      operationId: products_assets_set_primary_create
      description: |-
        Nested under /products/<product_pk>/assets/.
        Handles upload, delete, reorder and set-primary.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
        required: true
      tags:
      - products
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductAssetRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductAsset'
          description: ''
  /products/{product_pk}/history/:
    get:
      operationId: products_history_list
      summary: Retrieve product-specific history events
      parameters:
      - name: product_pk
        in: path
        required: true
        schema: { type: integer }
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags: [products]
      security:
      - jwtAuth: []
      responses:
        "200":
          description: Paginated list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductEventList'

components:
  schemas:
    PaginatedProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PatchedProductAssetRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        asset_type:
          type: string
          minLength: 1
          description: Type of asset (image, video, document, etc.)
          maxLength: 20
        name:
          type: string
          nullable: true
          maxLength: 255
        order:
          type: integer
          description: Order in which assets are displayed
        is_primary:
          type: boolean
          description: Is this the main asset for the product?
        content_type:
          type: string
          nullable: true
          description: MIME type of the file
          maxLength: 100
        file_size:
          type: integer
          description: Size of the file in bytes
        uploaded_by:
          type: integer
          nullable: true
    PatchedProductRequest:
      type: object
      description: Serializer for products with JSON fields handling
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        sku:
          type: string
          minLength: 1
          maxLength: 50
        price:
          type: number
          format: double
        category:
          type: string
          nullable: true
          maxLength: 100
        is_active:
          type: boolean
        brand:
          type: string
          nullable: true
          maxLength: 100
        barcode:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            minLength: 1
        attributes: {}
        primary_image:
          type: string
          format: binary
          nullable: true
    Product:
      type: object
      description: Serializer for products with JSON fields handling
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        sku:
          type: string
          maxLength: 50
        price:
          type: number
          format: double
        category:
          type: string
          nullable: true
          maxLength: 100
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        brand:
          type: string
          nullable: true
          maxLength: 100
        barcode:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
        attributes: {}
        primary_image:
          type: string
          format: uri
          nullable: true
        primary_image_thumb:
          type: string
          readOnly: true
        primary_image_large:
          type: string
          readOnly: true
        created_by:
          type: string
          format: email
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - images
      - name
      - price
      - primary_image_large
      - primary_image_thumb
      - sku
      - updated_at
    ProductAsset:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        file:
          type: string
          format: uri
        file_url:
          type: string
          readOnly: true
        asset_type:
          type: string
          description: Type of asset (image, video, document, etc.)
          maxLength: 20
        name:
          type: string
          nullable: true
          maxLength: 255
        order:
          type: integer
          description: Order in which assets are displayed
        is_primary:
          type: boolean
          description: Is this the main asset for the product?
        content_type:
          type: string
          nullable: true
          description: MIME type of the file
          maxLength: 100
        file_size:
          type: integer
          description: Size of the file in bytes
        file_size_formatted:
          type: string
          readOnly: true
        uploaded_by:
          type: integer
          nullable: true
        uploaded_by_name:
          type: string
          readOnly: true
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        product:
          type: integer
          readOnly: true
      required:
      - file
      - file_size_formatted
      - file_url
      - id
      - product
      - uploaded_at
      - uploaded_by_name
    ProductAssetRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        asset_type:
          type: string
          minLength: 1
          description: Type of asset (image, video, document, etc.)
          maxLength: 20
        name:
          type: string
          nullable: true
          maxLength: 255
        order:
          type: integer
          description: Order in which assets are displayed
        is_primary:
          type: boolean
          description: Is this the main asset for the product?
        content_type:
          type: string
          nullable: true
          description: MIME type of the file
          maxLength: 100
        file_size:
          type: integer
          description: Size of the file in bytes
        uploaded_by:
          type: integer
          nullable: true
      required:
      - file
    ProductImage:
      type: object
      description: Serializer for product images
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          readOnly: true
        order:
          type: integer
          description: Order in which images are displayed
        is_primary:
          type: boolean
          description: Is this the main image for the product?
      required:
      - id
      - url
    ProductImageRequest:
      type: object
      description: Serializer for product images
      properties:
        order:
          type: integer
          description: Order in which images are displayed
        is_primary:
          type: boolean
          description: Is this the main image for the product?
    ProductRequest:
      type: object
      description: Serializer for products with JSON fields handling
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        sku:
          type: string
          minLength: 1
          maxLength: 50
        price:
          type: number
          format: double
        category:
          type: string
          nullable: true
          maxLength: 100
        is_active:
          type: boolean
        brand:
          type: string
          nullable: true
          maxLength: 100
        barcode:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            minLength: 1
        attributes: {}
        primary_image:
          type: string
          format: binary
          nullable: true
      required:
      - name
      - price
      - sku
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    PaginatedProductEventList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/products/1/history/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/products/1/history/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductEvent'
    ProductEvent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        event_type:
          type: string
          description: Type of the event (e.g. created, price_changed)
        summary:
          type: string
          description: Human-readable summary of the event
        payload:
          type: object
          description: Additional data or diff for power users
        created_at:
          type: string
          format: date-time
          description: When the event occurred
        created_by_name:
          type: string
          description: Name of the user who performed the action
      required:
        - id
        - event_type
        - summary
        - created_at
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
