# Generated by Django 4.2.7 on 2025-05-10 18:03

from django.db import migrations, transaction
from django.utils import timezone

def forwards(apps, schema_editor):
    Product       = apps.get_model('products', 'Product')
    ProductPrice  = apps.get_model('prices', 'ProductPrice')
    Organization  = apps.get_model('organizations', 'Organization')
    SalesChannel  = apps.get_model('products', 'SalesChannel')
    Currency      = apps.get_model('prices', 'Currency')
    PriceType     = apps.get_model('prices', 'PriceType')

    # We'll assign all legacy prices to the 'list' price_type,
    # use default currency 'USD', no channel, valid_from = product.created_at
    # and keep organization_id on the Product.

    with transaction.atomic():
        for prod in Product.objects.all():
            legacy_price = prod.price
            if legacy_price is None:
                continue

            # Ensure each product has an organization
            org = prod.organization
            if not org:
                print(f"Skipping product {prod.id}: No organization")
                continue
            
            # Get the USD currency for this organization
            try:
                usd_currency = Currency.objects.get(iso_code='USD', organization=org)
            except Currency.DoesNotExist:
                print(f"USD currency not found for organization {org.id}, skipping product {prod.id}")
                continue
                
            # Get or create a 'list' price type for this organization
            list_price_type, created = PriceType.objects.get_or_create(
                code='list',
                organization=org,
                defaults={'label': 'List Price'}
            )
            
            print(f"Migrating price {legacy_price} for product {prod.id} ({prod.name}) to new model")

            ProductPrice.objects.create(
                product_id    = prod.id,
                price_type    = list_price_type,
                currency      = usd_currency,
                amount        = legacy_price,
                valid_from    = prod.created_at or timezone.now(),
                valid_to      = None,
                channel_id    = None,
                organization  = org,
            )

def backwards(apps, schema_editor):
    ProductPrice = apps.get_model('prices', 'ProductPrice')
    # Rollback simply deletes all price_type='list' entries
    ProductPrice.objects.filter(price_type__code='list').delete()

class Migration(migrations.Migration):

    dependencies = [
        ('prices', '0002_seed_currencies'),
        ('products', '10006_add_price_models'),  # This is the migration that added the price models
    ]

    operations = [
        migrations.RunPython(forwards, backwards),
    ]
