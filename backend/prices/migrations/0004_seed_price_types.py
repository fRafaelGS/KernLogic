# Generated by Django 4.2.7 on 2025-05-11 14:22

from django.db import migrations
from django.utils.text import slugify

def seed_price_types(apps, schema_editor):
    """
    Seed standard price types for all organizations
    """
    PriceType = apps.get_model('prices', 'PriceType')
    Organization = apps.get_model('organizations', 'Organization')
    
    # Standard price types that should be available in every organization
    standard_price_types = [
        {"code": "list", "label": "List Price"},
        {"code": "cost", "label": "Cost Price"},
        {"code": "msrp", "label": "MSRP"},
        {"code": "promo", "label": "Promotional Price"},
        {"code": "wholesale", "label": "Wholesale Price"},
        {"code": "base", "label": "Base Price"},
        {"code": "special", "label": "Special Price"},
        {"code": "clearance", "label": "Clearance Price"},
    ]
    
    organizations = Organization.objects.all()
    
    # For each organization, create standard price types if they don't exist
    for org in organizations:
        for price_type in standard_price_types:
            # Check if this price type already exists for this organization
            if not PriceType.objects.filter(
                code=price_type["code"],
                organization=org
            ).exists():
                # Create the price type
                PriceType.objects.create(
                    code=price_type["code"],
                    label=price_type["label"],
                    organization=org
                )
                print(f"Created price type {price_type['label']} ({price_type['code']}) for {org}")

def reverse_seed(apps, schema_editor):
    """No need to delete price types when reversing migration"""
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('prices', '0003_migrate_legacy_prices'),
    ]

    operations = [
        migrations.RunPython(seed_price_types, reverse_seed),
    ] 