# Generated by Django 4.2.20 on 2025-05-02 23:51

from django.db import migrations
import uuid

def migrate_org_uuid_to_foreign_key(apps, schema_editor):
    """
    Migrates existing Membership.org_id UUIDs to proper foreign keys to Organization.
    
    1. First make sure all Organizations have UUIDs
    2. Then link Memberships to Organizations based on UUID
    """
    Organization = apps.get_model('organizations', 'Organization')
    Membership = apps.get_model('teams', 'Membership')
    
    # Make sure all orgs have UUIDs
    for org in Organization.objects.all():
        if not org.uuid:
            org.uuid = uuid.uuid4()
            org.save()
    
    # For each membership, find the organization with matching UUID
    for membership in Membership.objects.all():
        if membership.org_id:
            try:
                # Find org with matching UUID and link it
                org = Organization.objects.filter(uuid=membership.org_id).first()
                if org:
                    membership.organization = org
                    membership.save()
                    print(f"Linked membership {membership.id} to organization {org.id} ({org.name})")
                else:
                    # No matching org found
                    print(f"Warning: No organization found with UUID {membership.org_id} for membership {membership.id}")
            except Exception as e:
                print(f"Error linking membership {membership.id}: {str(e)}")

class Migration(migrations.Migration):

    dependencies = [
        ("teams", "0002_alter_membership_unique_together_and_more"),
        # Add organizations dependency to ensure UUID field exists
        ("organizations", "0003_organization_uuid"),
    ]

    operations = [
        migrations.RunPython(
            migrate_org_uuid_to_foreign_key,
            migrations.RunPython.noop  # No reverse migration
        ),
    ]
