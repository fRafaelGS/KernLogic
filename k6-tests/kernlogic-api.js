/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * KernLogic API
 * Inventory and product management API
 * Service version: 1.0.0
 */
import { FormData } from "https://jslib.k6.io/formdata/0.0.2/index.js";
import { URL, URLSearchParams } from "https://jslib.k6.io/url/1.0.0/index.js";
import http from "k6/http";

// Enums
export const ActionEnum = {
  invite: "invite",
  role_change: "role_change",
  remove: "remove",
};

export const DataTypeEnum = {
  text: "text",
  number: "number",
  boolean: "boolean",
  date: "date",
  select: "select",
  rich_text: "rich_text",
  price: "price",
  media: "media",
  measurement: "measurement",
  url: "url",
  email: "email",
  phone: "phone",
};

export const DuplicateStrategyEnum = {
  skip: "skip",
  overwrite: "overwrite",
  abort: "abort",
};

export const ImportTaskStatusEnum = {
  queued: "queued",
  running: "running",
  success: "success",
  partial_success: "partial_success",
  error: "error",
};

export const MembershipStatusEnum = {
  pending: "pending",
  active: "active",
};

/**
 * This is the base client to use for interacting with the API.
 */
export class KernLogicAPIClient {
  constructor(clientOptions) {
    this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, "");
    this.commonRequestParameters = clientOptions.commonRequestParameters || {};
  }

  /**
   * Takes a set of user credentials and returns an access and refresh JSON web
   * token pair to prove the authentication of those credentials.
   */
  tokenCreate(tokenObtainPairRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/token/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(tokenObtainPairRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * Takes a refresh type JSON web token and returns an access type JSON web
   * token if the refresh token is valid.
   */
  tokenRefreshCreate(tokenRefreshRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/token/refresh/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(tokenRefreshRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  orgsRetrieve(orgId, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/orgs/${orgId}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * Update organization settings including default_locale and default_channel
   */
  orgsPartialUpdate(orgId, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/orgs/${orgId}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("PATCH", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  organizationsRetrieve(orgId, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/organizations/${orgId}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * Update organization settings including default_locale and default_channel
   */
  organizationsPartialUpdate(orgId, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/organizations/${orgId}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("PATCH", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  analyticsCompletenessExportRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/analytics/completeness-export/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  analyticsReadinessExportRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/analytics/readiness-export/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  analyticsEnrichmentVelocityExportRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/analytics/enrichment-velocity-export/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  analyticsLocalizationQualityExportRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/analytics/localization-quality-export/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  analyticsChangeHistoryExportRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/analytics/change-history-export/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  importsFieldSchemaRetrieve(params, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/imports/field-schema/`);
    if (params && params.v) {
      url.searchParams.append('v', String(params.v));
    }
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  importsAttributeGroupsSchemaRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/imports/attribute-groups-schema/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  importsAttributesSchemaRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/imports/attributes-schema/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  importsFamiliesSchemaRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/imports/families-schema/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsList(params, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/`);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          url.searchParams.append(key, String(value));
        }
      });
    }
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsCreate(productRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(productRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsBrandsRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/brands/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsBulkCreateCreate(productRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/bulk-create/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(productRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsBulkDeleteCreate(productRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/bulk-delete/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(productRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsBulkUpdateCreate(productRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/bulk-update/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(productRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsCategoriesRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/categories/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsCategoriesCreate(productRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/categories/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(productRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsCleanupCategoryPlaceholdersCreate(productRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/cleanup-category-placeholders/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(productRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsSalesChannelsRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/sales-channels/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsSalesChannelsCreate(productRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/sales-channels/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(productRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsStatsRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/stats/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsTagsRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/tags/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsTagsCreate(productRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/tags/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(productRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsPartialUpdate(id, patchedProductRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/${id}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("PATCH", url.toString(), JSON.stringify(patchedProductRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsRetrieve(id, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/${id}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  productsDestroy(id, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/products/${id}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("DELETE", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  categoriesList(params, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/categories/`);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          url.searchParams.append(key, String(value));
        }
      });
    }
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  categoriesCreate(categoryRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/categories/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("POST", url.toString(), JSON.stringify(categoryRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  categoriesPartialUpdate(id, patchedCategoryRequest, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/categories/${id}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("PATCH", url.toString(), JSON.stringify(patchedCategoryRequest), {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        "Content-Type": "application/json",
      },
    });
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  categoriesRetrieve(id, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/categories/${id}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  categoriesDestroy(id, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/categories/${id}/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("DELETE", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  dashboardActivityRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/dashboard/activity/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  dashboardSummaryRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/dashboard/summary/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  analyticsCompletenessRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/analytics/completeness/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  analyticsReadinessRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/analytics/readiness/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  userRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/user/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  usersList(params, requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/users/`);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          url.searchParams.append(key, String(value));
        }
      });
    }
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  usersMeRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/users/me/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  testDbRetrieve(requestParameters) {
    const url = new URL(this.cleanBaseUrl + `/test-db/`);
    const mergedRequestParameters = this._mergeRequestParameters(requestParameters || {}, this.commonRequestParameters);
    const response = http.request("GET", url.toString(), undefined, mergedRequestParameters);
    let data;
    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  _mergeRequestParameters(requestParameters, commonRequestParameters) {
    if (!commonRequestParameters) {
      return requestParameters;
    }

    const merged = { ...commonRequestParameters, ...requestParameters };

    // Merge headers specifically
    if (commonRequestParameters.headers || requestParameters.headers) {
      merged.headers = {
        ...commonRequestParameters.headers,
        ...requestParameters.headers,
      };
    }

    return merged;
  }
}
