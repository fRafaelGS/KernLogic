# Generated by Django 4.2.7 on 2025-05-11 20:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('prices', '0005_update_product_price_model'),
        ('products', '10012_rename_products_pr_categor_14b9c0_idx_products_pr_categor_9edb3d_idx'),
    ]

    operations = [
        # 1. Add new columns
        migrations.RunSQL(
            """
            -- Add temp_price_type_id column
            ALTER TABLE products_productprice ADD COLUMN temp_price_type_id integer;
            
            -- Add temp_currency_id column
            ALTER TABLE products_productprice ADD COLUMN temp_currency_id character varying(3);
            """,
            reverse_sql="ALTER TABLE products_productprice DROP COLUMN IF EXISTS temp_price_type_id, DROP COLUMN IF EXISTS temp_currency_id;"
        ),
        
        # 2. Populate temp columns from data in related tables
        migrations.RunSQL(
            """
            -- For each product price, find the matching price type and update temp_price_type_id
            UPDATE products_productprice pp 
            SET temp_price_type_id = pt.id
            FROM prices_pricetype pt
            WHERE pp.price_type = pt.code 
              AND pp.organization_id = pt.organization_id;
            
            -- For any missing price types, try to find any price type with the same code
            UPDATE products_productprice pp
            SET temp_price_type_id = pt.id
            FROM prices_pricetype pt
            WHERE pp.temp_price_type_id IS NULL
              AND pp.price_type = pt.code
              AND pt.id IN (SELECT MIN(id) FROM prices_pricetype WHERE code = pt.code GROUP BY code);
            
            -- For any still missing price types, use MSRP or list as fallback
            UPDATE products_productprice pp
            SET temp_price_type_id = (
                SELECT id FROM prices_pricetype 
                WHERE code IN ('list', 'msrp') 
                  AND organization_id = pp.organization_id
                ORDER BY code = 'list' DESC
                LIMIT 1
            )
            WHERE pp.temp_price_type_id IS NULL AND pp.organization_id IS NOT NULL;
            
            -- For currencies, find matching currency for this org
            UPDATE products_productprice pp
            SET temp_currency_id = c.iso_code
            FROM prices_currency c
            WHERE pp.currency = c.iso_code
              AND pp.organization_id = c.organization_id;
              
            -- For any missing currencies, try to find any currency with same code
            UPDATE products_productprice pp
            SET temp_currency_id = c.iso_code
            FROM prices_currency c
            WHERE pp.temp_currency_id IS NULL
              AND pp.currency = c.iso_code
            LIMIT 1;
            
            -- For any still missing currencies, use USD
            UPDATE products_productprice pp
            SET temp_currency_id = 'USD'
            WHERE pp.temp_currency_id IS NULL;
            """,
            reverse_sql=""
        ),
        
        # 3. Replace original columns with new ones
        migrations.RunSQL(
            """
            -- Drop the old columns
            ALTER TABLE products_productprice DROP COLUMN price_type;
            ALTER TABLE products_productprice DROP COLUMN currency;
            
            -- Rename the temp columns
            ALTER TABLE products_productprice RENAME COLUMN temp_price_type_id TO price_type_id;
            ALTER TABLE products_productprice RENAME COLUMN temp_currency_id TO currency_id;
            
            -- Add foreign key constraints
            ALTER TABLE products_productprice ADD CONSTRAINT products_productprice_price_type_id_fk 
            FOREIGN KEY (price_type_id) REFERENCES prices_pricetype(id) ON DELETE RESTRICT;
            
            ALTER TABLE products_productprice ADD CONSTRAINT products_productprice_currency_id_fk 
            FOREIGN KEY (currency_id) REFERENCES prices_currency(iso_code) ON DELETE RESTRICT;
            """,
            reverse_sql=""
        ),
        
        # 4. Add the relation fields in the model
        migrations.AlterField(
            model_name='productprice',
            name='price_type',
            field=models.ForeignKey('prices.PriceType', on_delete=django.db.models.deletion.PROTECT, related_name='product_app_prices', db_column='price_type_id'),
        ),
        migrations.AlterField(
            model_name='productprice',
            name='currency',
            field=models.ForeignKey('prices.Currency', on_delete=django.db.models.deletion.PROTECT, related_name='product_app_prices', to_field='iso_code', db_column='currency_id'),
        ),
    ] 